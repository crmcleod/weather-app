{"version":3,"sources":["logo.svg","DayCard.js","MetOffice.js","MetCardToday.js","MainContainer.js","App.js","index.js"],"names":["DayCard","day","weatherTypeReference","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","weatherByTime","Rep","map","time","className","$","W","T","S","G","Pp","value","slice","MetOffice","dayCards","getTodaysWeather","setLocations","locations","locationKey","handleSetKey","useState","weatherData","setWeatherData","locationID","setLocationId","useEffect","a","url","apiKey","axios","process","result","adjustedLocations","data","Locations","Location","location","name","id","SiteRep","metOfficeToday","DV","Period","e","indexOf","console","log","handleClick","onMouseDown","onMouseLeave","MetCardToday","MainContainer","sortedLocationList","locationInput","setLocationInput","setLocationKey","todaysWeather","setTodaysWeather","htmlFor","list","onChange","target","placeholder","findIndex","weather","blah","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAAe,I,0DC+DAA,EA7DC,SAAC,GAAW,IAAD,EAATC,EAAS,EAATA,IAERC,GAAoB,GACtBC,EAAG,sBACHC,EAAG,0BACHC,EAAG,sCACHC,EAAG,oCACHC,EAAG,WACHC,EAAG,qBACHC,EAAG,oBACHC,EAAG,iBACHC,EAAG,yBACHC,EAAG,0CACHC,GAAI,wCACJC,GAAI,wBACJC,GAAI,2BACJC,GAAI,0CACJC,GAAI,wCACJC,GAAI,2BACJC,GAAI,kDACJC,GAAI,+CACJC,GAAI,kCACJC,GAAI,oCACJC,GAAI,kCACJC,GAAI,sBAtBkB,mBAuBlB,oCAvBkB,cAwBtB,GAAI,2CAxBkB,cAyBtB,GAAI,yCAzBkB,cA0BtB,GAAI,4BA1BkB,cA2BtB,GAAI,uDA3BkB,cA4BtB,GAAI,qDA5BkB,cA6BtB,GAAI,wCA7BkB,cA8BtB,GAAI,kCA9BkB,cA+BtB,GAAI,gCA/BkB,cAgCtB,GAAI,mBAhCkB,GAmCpBC,EAAgBxB,EAAIyB,IAAIC,KAAI,SAAEC,GAChC,OACI,mCACI,sBAAKC,UAAU,eAAf,UACI,gCAAM,EAAID,EAAKE,GAAG,GAAlB,SACA,4BAAI5B,EAAqB0B,EAAKG,KAC9B,+CAAkBH,EAAKI,KACvB,8CAAiBJ,EAAKK,EAAtB,SACA,8CAAiBL,EAAKM,EAAtB,UACA,kDAAqBN,EAAKO,GAA1B,SAN+BP,EAAKI,QAWpD,OACI,mCACI,sBAAKH,UAAU,WAAf,UACI,mCAAM5B,EAAImC,MAAMC,MAAM,EAAE,IAAxB,OACCZ,QCKFa,EA1DG,SAAC,GAE0C,IA4BrDC,EA7BJC,EACwD,EADxDA,iBACWC,GAA6C,EAAxDC,UAAwD,EAA7CD,cAAcE,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAAkB,EAElBC,qBAFkB,mBAEjDC,EAFiD,KAEpCC,EAFoC,OAGpBF,mBAASF,GAHW,mBAGjDK,EAHiD,KAGrCC,EAHqC,KAMxDC,oBAAS,sBAAE,kCAAAC,EAAA,6DACPF,EAAcN,GACRS,EAAM,SAACJ,EAAYK,GAAb,4EAAuFL,EAAvF,4BAAqHK,IAF1H,SAGcC,IAAOF,EAAIJ,EAAYO,yCAHrC,cAGDC,EAHC,gBAIiBF,IAAMF,EAAI,WAAYG,yCAJvC,OAIDb,EAJC,OAMDe,EAAoBf,EAAUgB,KAAKC,UAAUC,SAASjC,KAAI,SAACkC,GAC7D,MACI,CACIA,SAAUA,EAASC,KACnBC,GAAIF,EAASE,OAKzBhB,EAAeS,EAAOE,KAAKM,SAC3BvB,EAAagB,GACbjB,EAAiB,CAACyB,eAAgBT,EAAOE,KAAKM,QAAQE,GAAGN,SAASO,OAAO,GAAGzC,IAAI8B,EAAOE,KAAKM,QAAQE,GAAGN,SAASO,OAAO,GAAGzC,IAAIC,KAAI,SAAUyC,GAC5I,OAAOA,EAAEtC,KAAKuC,QAAQ,UACtBC,QAAQC,IAAIf,GAnBL,4CAoBR,CAACR,IAGAF,IACJP,EACIO,EAAYoB,GAAGN,SAASO,OAAOxC,KAAI,SAAC1B,GACjC,OAAQ,cAAC,EAAD,CAAyBA,IAAKA,GAAhBA,EAAIyB,IAAII,OAIrC,IAAM0C,EAAc,WAChBvB,EAAcN,GACdC,KAEJ,OAAIE,EAMA,mCACI,gCACI,wBAAQ2B,YAAaD,EAAaE,aAAcF,EAAhD,uBACCjC,OAPL,oBAAIwB,GAAG,UAAP,6BCWGY,EAxDM,SAAC,GAAY,IAAD,EAAVjB,EAAU,EAAVA,KAEbxD,GAAoB,GACtBC,EAAG,sBACHC,EAAG,0BACHC,EAAG,sCACHC,EAAG,oCACHC,EAAG,WACHC,EAAG,qBACHC,EAAG,oBACHC,EAAG,iBACHC,EAAG,yBACHC,EAAG,0CACHC,GAAI,wCACJC,GAAI,wBACJC,GAAI,2BACJC,GAAI,0CACJC,GAAI,wCACJC,GAAI,2BACJC,GAAI,kDACJC,GAAI,+CACJC,GAAI,kCACJC,GAAI,oCACJC,GAAI,kCACJC,GAAI,sBAtBkB,mBAuBlB,oCAvBkB,cAwBtB,GAAI,2CAxBkB,cAyBtB,GAAI,yCAzBkB,cA0BtB,GAAI,4BA1BkB,cA2BtB,GAAI,uDA3BkB,cA4BtB,GAAI,qDA5BkB,cA6BtB,GAAI,wCA7BkB,cA8BtB,GAAI,kCA9BkB,cA+BtB,GAAI,gCA/BkB,cAgCtB,GAAI,mBAhCkB,GAmC1B,OAAIkC,EAMA,mCACI,sBAAK7B,UAAU,cAAf,UACI,gDACA,mCAAO3B,EAAqBwD,EAAK3B,GAAjC,OACA,+CAAkB2B,EAAK1B,EAAvB,SAAgC,uBAAhC,mBACqB0B,EAAKvB,GAD1B,KAC+B,uBAD/B,eAEiBuB,EAAKzB,EAFtB,cARJ,MCWG2C,EA/CO,WAAO,IAiBrBC,EAjBoB,EAEoBhC,mBAAS,aAF7B,mBAEhBiC,EAFgB,KAEDC,EAFC,OAGgBlC,mBAAS,MAHzB,mBAGhBF,EAHgB,KAGHqC,EAHG,OAIkBnC,qBAJlB,gCAKoBA,mBAAS,KAL7B,mBAKhBoC,EALgB,KAKDC,EALC,OAMYrC,qBANZ,mBAMhBH,EANgB,KAMLD,EANK,KAkBpBC,IAEAmC,EAAqBnC,EAAUf,KAAK,SAAAkC,GAChC,OACI,wBAAQzB,MAAOyB,EAASA,SAAxB,SAAqDA,EAASA,UAAvBA,EAASE,QAO5D,OACI,qCACI,mCAAOe,EAAP,OACA,wBAAOK,QAAQ,iBAAf,gCACA,uBAAOC,KAAK,iBAAiBC,SAzBR,SAACjB,GAC1BW,EAAiBX,EAAEkB,OAAOlD,QAwBuCmD,YAAY,cACrE,0BAAUxB,GAAG,iBAAiB3B,MAAO0C,EAAgBS,YAAY,qBAAjE,SACKV,OAKT,cAAC,EAAD,CAAcnB,KAAMuB,EAAchB,iBAClC,cAAC,EAAD,CAAWrB,aA9BE,WACjBoC,EAAetC,EAAUA,EAAU8C,WAAU,SAAS3B,GAClD,OAAOA,EAASA,UAAYiB,MAAkBf,KA4BPvB,iBAhBvB,SAACiD,EAASC,GAC9BR,EAAiBO,IAe8D/C,UAAWA,EAAWD,aAAcA,EAAcE,YAAaA,QCjCvIgD,MATf,WAEE,OACE,mCACE,cAAC,EAAD,OCJNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bd638a32.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { useState } from 'react'\n\nconst DayCard = ({day}) => {\n    \n    const weatherTypeReference = {\n        0: \" ✨ Clear night\",\n        1: \" ☀️ Sunny day\",\n        2: \" ⛅️ Partly cloudy (night)\",\n        3: \" ⛅️ Partly cloudy (day)\",\n        4: \"Not used\",\n        5: \" 🌫 Mist\",\n        6: \" 🌫 Fog\",\n        7: \" ☁ Cloudy\",\n        8: \" 🌥 Overcast\",\n        9: \" ☔️ Light rain shower (night)\",\n        10: \" ☔️ Light rain shower (day)\",\n        11: \" ☔️ Drizzle\",\n        12: \" ☔️ Light rain\",\n        13: \" 🌧 Heavy rain shower (night)\",\n        14: \" 🌧 Heavy rain shower (day)\",\n        15: \" 🌧 Heavy rain\",\n        16: \" 🌧 🌨 Sleet shower (night)\",\n        17: \"🌧 🌨 Sleet shower (day)\",\n        18: \"🌧 🌨 Sleet\",\n        19: \" ❄️ Hail shower (night)\",\n        20: \" ❄️ Hail shower (day)\",\n        21: \" ❄️ Hail\",\n        18: \" 🌧 🌨 Sleet\",\n        22: \" 🌨 Light snow shower (night)\",\n        23: \" 🌨 Light snow shower (day)\",\n        24: \" 🌨 Light snow\",\n        25: \" 🌨🌨 Heavy snow shower (night)\",\n        26: \" 🌨🌨 Heavy snow shower (day)\",\n        27: \" 🌨🌨 Heavy snow\",\n        28: \" ⛈ Thunder shower (night)\",\n        29: \" ⛈ Thunder shower (day)\",\n        30: \" ⛈ Thunder\"\n    }\n\n    const weatherByTime = day.Rep.map(( time ) => {\n        return (\n            <>\n                <div className=\"card-details\" key={time.T}>\n                    <h4>{(0 + time.$)/60}:00</h4>\n                    <p>{weatherTypeReference[time.W]}</p>\n                    <p> Temperature: {time.T}</p>\n                    <p> Wind speed: {time.S}mph</p>\n                    <p> Wind gusts: {time.G}mph </p>\n                    <p> Chance of rain: {time.Pp}%</p>\n                </div>\n            </>\n        )\n    })\n    return(\n        <>\n            <div className=\"day-card\">\n                <h1> {day.value.slice(0,10)} </h1>\n                {weatherByTime}\n            </div>\n        </>\n    )\n}\n\nexport default DayCard","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport DayCard from './DayCard'\n\nconst MetOffice = ({\n    getTodaysWeather, \n    locations, setLocations, locationKey, handleSetKey}) => {\n\n    const [weatherData, setWeatherData] = useState();\n    const [locationID, setLocationId] = useState(locationKey);\n\n\n    useEffect( async () => {\n        setLocationId(locationKey)\n        const url = (locationID, apiKey) => `//datapoint.metoffice.gov.uk/public/data/val/wxfcs/all/json/${locationID}?res=3hourly&key=${apiKey}`\n        const result = await axios( url(locationID, process.env.REACT_APP_API_KEY) )\n        const locations = await axios(url('sitelist', process.env.REACT_APP_API_KEY))\n\n        const adjustedLocations = locations.data.Locations.Location.map((location) => {\n            return (\n                {\n                    location: location.name,\n                    id: location.id\n                }\n            )\n        })\n\n        setWeatherData(result.data.SiteRep);\n        setLocations(adjustedLocations);\n        getTodaysWeather({metOfficeToday: result.data.SiteRep.DV.Location.Period[0].Rep[result.data.SiteRep.DV.Location.Period[0].Rep.map(function (e) {\n        return e.$ }).indexOf(\"720\")]})\n        console.log(result)\n    }, [locationID])\n\n    let dayCards;\n    if(!weatherData){} else {\n    dayCards = \n        weatherData.DV.Location.Period.map((day) => {\n           return( <DayCard key={day.Rep.$} day={day} /> )\n        })\n    }\n\n    const handleClick = () => {\n        setLocationId(locationKey)\n        handleSetKey()\n    }\n    if(!weatherData){\n        return(\n            <h2 id=\"loading\"> ...loading...</h2>\n        )\n    }\n    return(\n        <>\n            <div>\n                <button onMouseDown={handleClick} onMouseLeave={handleClick}>Re-render</button>\n                {dayCards}\n            </div>\n        </>\n    )}\n\n// }\n\nexport default MetOffice","import React from 'react'\nimport MetOffice from './MetOffice'\n\nconst MetCardToday = ({data}) => {\n\n    const weatherTypeReference = {\n        0: \" ✨ Clear night\",\n        1: \" ☀️ Sunny day\",\n        2: \" ⛅️ Partly cloudy (night)\",\n        3: \" ⛅️ Partly cloudy (day)\",\n        4: \"Not used\",\n        5: \" 🌫 Mist\",\n        6: \" 🌫 Fog\",\n        7: \" ☁ Cloudy\",\n        8: \" 🌥 Overcast\",\n        9: \" ☔️ Light rain shower (night)\",\n        10: \" ☔️ Light rain shower (day)\",\n        11: \" ☔️ Drizzle\",\n        12: \" ☔️ Light rain\",\n        13: \" 🌧 Heavy rain shower (night)\",\n        14: \" 🌧 Heavy rain shower (day)\",\n        15: \" 🌧 Heavy rain\",\n        16: \" 🌧 🌨 Sleet shower (night)\",\n        17: \"🌧 🌨 Sleet shower (day)\",\n        18: \"🌧 🌨 Sleet\",\n        19: \" ❄️ Hail shower (night)\",\n        20: \" ❄️ Hail shower (day)\",\n        21: \" ❄️ Hail\",\n        18: \" 🌧 🌨 Sleet\",\n        22: \" 🌨 Light snow shower (night)\",\n        23: \" 🌨 Light snow shower (day)\",\n        24: \" 🌨 Light snow\",\n        25: \" 🌨🌨 Heavy snow shower (night)\",\n        26: \" 🌨🌨 Heavy snow shower (day)\",\n        27: \" 🌨🌨 Heavy snow\",\n        28: \" ⛈ Thunder shower (night)\",\n        29: \" ⛈ Thunder shower (day)\",\n        30: \" ⛈ Thunder\"\n    }\n\n    if(!data){\n        return(\n            null\n        )\n    }\n    return(\n        <>\n            <div className=\"todays-card\">\n                <h3> Met Office:  </h3>\n                <h4> { weatherTypeReference[data.W] } </h4>\n                <p> Temperature: {data.T}&deg;C <br></br>\n                    Chance of rain: {data.Pp}% <br></br>\n                    Wind Speed: {data.S}mph\n                </p>\n            </div>\n        </>\n    )\n}\n\nexport default MetCardToday","import React, {useState, useEffect} from 'react'\nimport DayCard from './DayCard'\nimport MetCardToday from './MetCardToday'\nimport MetOffice from './MetOffice'\nimport OpenWeatherMap from './OpenWeatherMap'\n\nconst MainContainer = () => {\n\n    const [ locationInput, setLocationInput ] = useState('Edinburgh')\n    const [ locationKey, setLocationKey ] = useState(3166)\n    const [ metLocations, setMetLocations ] = useState()\n    const [ todaysWeather, setTodaysWeather ] = useState([])\n    const [ locations, setLocations ] = useState()\n\n    const handleLocationChange = (e) => {\n        setLocationInput(e.target.value)}\n\n    const handleSetKey = () => {\n        setLocationKey(locations[locations.findIndex(function(location) {\n            return location.location == locationInput })].id)\n\n    }\n\n    let sortedLocationList;\n    if(!locations){\n    } else {\n        sortedLocationList = locations.map( location => {\n            return (\n                <option value={location.location} key={location.id}>{location.location}</option>)\n    })}\n\n   const getTodaysWeather = (weather, blah) => {\n        setTodaysWeather(weather)\n   }\n\n    return (\n        <>\n            <h1> { locationInput } </h1>\n            <label htmlFor=\"location-input\"> Choose location...\n            <input list=\"location-input\" onChange={handleLocationChange} placeholder=\"Edinburgh\"></input>\n                <datalist id=\"location-input\" value={locationInput}  placeholder=\"Choose location...\">\n                    {sortedLocationList}\n                </datalist>\n                {/* <button id=\"set-location-key\" \n                onClick={handleSetKey} >Go!</button> */}\n            </label>\n            <MetCardToday data={todaysWeather.metOfficeToday} />\n            <MetOffice handleSetKey={handleSetKey} getTodaysWeather={getTodaysWeather} locations={locations} setLocations={setLocations} locationKey={locationKey} />\n        </>\n    )\n\n}\n\nexport default MainContainer;","import logo from './logo.svg';\nimport './App.css';\nimport MetOffice from './MetOffice';\nimport MainContainer from './MainContainer';\n\nfunction App() {\n\n  return (\n    <>\n      <MainContainer />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}
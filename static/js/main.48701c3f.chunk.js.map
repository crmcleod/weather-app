{"version":3,"sources":["logo.svg","DayCard.js","MetOffice.js","App.js","index.js"],"names":["DayCard","day","weatherTypeReference","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","weatherByTime","Rep","map","time","className","$","W","T","S","G","Pp","value","slice","MetOffice","dayCards","useState","weatherData","setWeatherData","locationID","url","apiKey","Wx","Param","a","name","DV","Location","Period","useEffect","axios","process","result","data","SiteRep","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAAe,I,qDC8DAA,EA5DC,SAAC,GAAW,IAAVC,EAAS,EAATA,IAERC,EAAuB,CACzBC,EAAG,cACHC,EAAG,YACHC,EAAG,wBACHC,EAAG,sBACHC,EAAG,WACHC,EAAG,OACHC,EAAG,MACHC,EAAG,SACHC,EAAG,WACHC,EAAG,4BACHC,GAAI,0BACJC,GAAI,UACJC,GAAI,aACJC,GAAI,4BACJC,GAAI,0BACJC,GAAI,aACJC,GAAI,uBACJC,GAAI,qBACJC,GAAI,QACJC,GAAI,sBACJC,GAAI,oBACJC,GAAI,OACJC,GAAI,4BACJC,GAAI,0BACJC,GAAI,aACJC,GAAI,4BACJC,GAAI,0BACJC,GAAI,aACJC,GAAI,yBACJC,GAAI,uBACJC,GAAI,WAGFC,EAAgBjC,EAAIkC,IAAIC,KAAI,SAAEC,GAChC,OACI,mCACI,sBAAKC,UAAU,eAAf,UACI,gCAAM,EAAID,EAAKE,GAAG,GAAlB,SACA,4BAAIrC,EAAqBmC,EAAKG,KAC9B,+CAAkBH,EAAKI,KACvB,8CAAiBJ,EAAKK,EAAtB,SACA,8CAAiBL,EAAKM,EAAtB,UACA,kDAAqBN,EAAKO,GAA1B,eAKhB,OACI,mCACI,sBAAKN,UAAU,WAAf,UACI,mCAAMrC,EAAI4C,MAAMC,MAAM,EAAE,IAAxB,OACCZ,QCNFa,EA9CG,WAAO,IAORC,EAPO,EAEkBC,qBAFlB,mBAEbC,EAFa,KAEAC,EAFA,OAGgBF,mBAAS,MAHzB,mBAGbG,EAHa,KAKdC,GALc,KAKR,SAACD,EAAYE,GAAb,kFAA6FF,EAA7F,4BAA2HE,KA0BvI,OAvBIJ,IAEAA,EAAYK,GAAGC,MAAMpB,KAAI,SAAEqB,GACvB,OACI,qCACI,mCAAMA,EAAElB,EAAR,OACA,kCAAKkB,EAAEC,KAAP,aAIhBV,EACIE,EAAYS,GAAGC,SAASC,OAAOzB,KAAI,SAACnC,GACjC,OAAQ,cAAC,EAAD,CAASA,IAAKA,QAI7B6D,oBAAS,sBAAE,4BAAAL,EAAA,sEACcM,IACjBV,EAAID,EAAYY,yCAFb,OACDC,EADC,OAIPd,EAAec,EAAOC,KAAKC,SAJpB,2CAKR,IAECjB,EAMA,mCACI,8BACKF,MANL,6CC1BGoB,MAPf,WAEE,OACF,cAAC,EAAD,KCFAC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.48701c3f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { useState } from 'react'\n\nconst DayCard = ({day}) => {\n    \n    const weatherTypeReference = {\n        0: \"Clear night\",\n        1: \"Sunny day\",\n        2: \"Partly cloudy (night)\",\n        3: \"Partly cloudy (day)\",\n        4: \"Not used\",\n        5: \"Mist\",\n        6: \"Fog\",\n        7: \"Cloudy\",\n        8: \"Overcast\",\n        9: \"Light rain shower (night)\",\n        10: \"Light rain shower (day)\",\n        11: \"Drizzle\",\n        12: \"Light rain\",\n        13: \"Heavy rain shower (night)\",\n        14: \"Heavy rain shower (day)\",\n        15: \"Heavy rain\",\n        16: \"Sleet shower (night)\",\n        17: \"Sleet shower (day)\",\n        18: \"Sleet\",\n        19: \"Hail shower (night)\",\n        20: \"Hail shower (day)\",\n        21: \"Hail\",\n        22: \"Light snow shower (night)\",\n        23: \"Light snow shower (day)\",\n        24: \"Light snow\",\n        25: \"Heavy snow shower (night)\",\n        26: \"Heavy snow shower (day)\",\n        27: \"Heavy snow\",\n        28: \"Thunder shower (night)\",\n        29: \"Thunder shower (day)\",\n        30: \"Thunder\"\n    }\n\n    const weatherByTime = day.Rep.map(( time ) => {\n        return (\n            <>\n                <div className=\"card-details\">\n                    <h4>{(0 + time.$)/60}:00</h4>\n                    <p>{weatherTypeReference[time.W]}</p>\n                    <p> Temperature: {time.T}</p>\n                    <p> Wind speed: {time.S}mph</p>\n                    <p> Wind gusts: {time.G}mph </p>\n                    <p> Chance of rain: {time.Pp}%</p>\n                </div>\n            </>\n        )\n    })\n    return(\n        <>\n            <div className=\"day-card\">\n                <h1> {day.value.slice(0,10)} </h1>\n                {weatherByTime}\n            </div>\n        </>\n    )\n}\n\nexport default DayCard","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport DayCard from './DayCard'\n\nconst MetOffice = () => {\n\n    const [weatherData, setWeatherData] = useState()\n    const [locationID, setLocationId] = useState(3166)\n\n    const url = (locationID, apiKey) => `https://datapoint.metoffice.gov.uk/public/data/val/wxfcs/all/json/${locationID}?res=3hourly&key=${apiKey}`\n    \n    let keyList, dayCards;\n    if(!weatherData){} else {\n    keyList =\n        weatherData.Wx.Param.map(( a ) => {\n            return (\n                <>\n                    <h3> {a.$} </h3>\n                    <p> {a.name} </p>\n                </>\n            )\n        });\n    dayCards = \n        weatherData.DV.Location.Period.map((day) => {\n           return( <DayCard day={day} /> )\n        })\n    }\n\n    useEffect( async () => {\n        const result = await axios(\n            url(locationID, process.env.REACT_APP_API_KEY)\n        )\n        setWeatherData(result.data.SiteRep)\n    }, [])\n\n    if(!weatherData){\n        return(\n            <p> ...loading</p>\n        )\n    }\n    return(\n        <>\n            <div>\n                {dayCards}\n            </div>\n        </>\n    )\n\n}\n\nexport default MetOffice","import logo from './logo.svg';\nimport './App.css';\nimport MetOffice from './MetOffice';\n\nfunction App() {\n\n  return (\n<MetOffice />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}